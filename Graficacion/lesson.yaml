- Class: meta
  Course: Ejercicios
  Lesson: Graficacion
  Author: Allan Vásquez
  Type: Standard
  Organization: Universidad Francisco Marroquín
  Version: 1.0

- Class: text
  Output: En esta lección conocerás el sistema base de graficación en R.

- Class: text
  Output: Si estás familiarizado con Microsoft Excel, encontrarás que R puede generar todas las gráficas con las que estás familiarizado, 
    gráficas de pastel, gráficas de barras, histogramas, etc... Además, hay  más tipos de gráficas disponibles en R y son mas faciles de hacer.

- Class: text
  Output: El sistema base de gráficos de R cuenta con dos tipos básicos de funciones, funciones de alto nivel y funciones de bajo nivel.

- Class: text
  Output: Las funciones de alto nivel generan gráficas preestablecidas.

- Class: text
  Output: Comenzaremos explorando las funciones de alto nivel.

- Class: text
  Output: Las funciones de alto nivel están diseñadas para generar un gráfico a
    partir de la información pasada como argumentos de la función.

- Class: text
  Output: La función plot() sirve para generar un grafico de dispersión o de puntos, aunque puede usarse en otros tipos de graficos.
    Una grafica de dispersión sirve para observar si las variables tienen correlación entre sí. 

- Class: cmd_question
  Output: Ingresa plot(c(1, 2, 3, 4, 5)) para crear la primera grafica de dispersión.
  CorrectAnswer: plot(c(1, 2,3, 4, 5))
  AnswerTests: omnitest(correctExpr='plot(c(1, 2, 3, 4, 5))')

- Class: text
  Output: Has graficado cada elemento del vector contra su posición o su índice, es decir que graficaste los puntos (1, 1), (2, 2), (3, 3), (4, 4) y (5, 5).
      
- Class: text
  Output: Esto se explica porque la grafica de dispersión grafica un vector en el eje X y otro en el eje Y, como solo le diste un vector entonces lo 
    graficó en el eje Y y utilizó los índices para el eje X.

- Class: cmd_question
  Output: Veamos qué pasa si ahora introduces plot(c(1, 2, 3), c(1, 3, 9)), esta vez estamos dandole dos vectores, el primero con los numeros del 1 al 3
    y el segundo con los números 1, 3 y 9.
  CorrectAnswer: plot(c(1, 2, 3), c(1, 3, 9))
  AnswerTests: omnitest(correctExpr='plot(c(1, 2, 3), c(1, 3, 9))')

- Class: text
  Output: Esta vez introdujiste dos vectores como entrada, cada uno con tres elementos. Entonces la gráfica fue construida tomando 
    el primer vector como el eje X y el segundo vector como el eje Y. para construir cada punto, los cuales son, (1, 1), (2, 3) y (3, 9).

- Class: text
  Output: Como ya te habrás dado cuenta plot() recibe dos argumentos principales. Que son los datos a graficar.

- Class: text
  Output: Es importante saber que plot() es una función genérica, por lo que graficará dependiendo del objeto que le sea dado como argumento. 
    En algunas ocasiones NO hará una grafica de dispersión

- Class: text
  Output: Por ejemplo, plot() puede recibir como argumento una tabla de frecuencias bidimensional y hacer una grafica de mosaico, 
    esto no lo vamos a practicar aquí, ya que requiere una explicación mas detallada, pero lo veremos mas adelante.

- Class: text
  Output: Además de los datos necesarios para graficar, la función plot() acepta el argumento type, que indica en que forma va a representarse 
    la gráfica, los tipos disponibles son, "p" para puntos, "l" para líneas, "b" para ambas (líneas y punto), "o" para líneas y puntos superpuestos,
    "c" para la líneas discontinuas "h" para líneas verticales, "s" para escalonado, "S" para otro tipo de escalonamiento.

- Class: cmd_question
  Output: Como te habrás dado cuenta, el tipo de gráfica por defecto es "p" o puntos. Ahora ingresa plot(c(1, 2, 3), c(3, 6, 9), type = "l") 
    en la línea de comandos para usar líneas.
  CorrectAnswer: plot(c(1, 2, 3), c(1, 3, 9), type = "l")
  AnswerTests: omnitest(correctExpr='plot(c(1, 2, 3),c(1, 3, 9), type = "l")')

- Class: cmd_question
  Output: 'Ahora grafica un vector con los numeros del 1 al 10 de forma escalonada.'
  CorrectAnswer: plot(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), type = "s")
  AnswerTests: any_of_exprs('plot(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), type = "s")', 'plot(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), type="S")')

- Class: cmd_question
  Output: 'Para continuar grafica el vector anterior usando ambas (líneas y puntos).'
  CorrectAnswer: plot(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), type = "b")
  AnswerTests: omnitest(correctExpr='plot(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), type = "b")')

- Class: text
  Output: Hemos probado varios tipos de gráficas que se pueden hacer con la función plot(), ahora antes de practicar otras
    funciones para hacer otros graficos diferentes vamos a ver los llamados "argumentos comunes".

- Class: text
  Output: Los argumentos comunes son argumentos que son aceptados por todas las funciones de graficación y que nos sirven para agregar 
    información complementaria al grafico. Estas son main para agregar título, sub para colocar texto abajo de la grafica, xlab para indicar el
    rotulo del eje X, y ylab  para el rótulo del eje Y.

- Class: cmd_question
  Output: 'El argumento main establece el título de la gráfica. Introduce plot(1:5, main="Mi gráfica")'
  CorrectAnswer: plot(1:5, main="Mi gráfica")
  AnswerTests: omnitest(correctExpr='plot(1:5, main="Mi gráfica")')


- Class: cmd_question
  Output: 'El argumento xlab establece un título para el eje X de la gráfica y ylab para el eje Y. 
    Establece "eje x" como título del eje X y "eje y" como título del eje Y en la gráfica anterior.'
  CorrectAnswer: plot(1:5, main="Mi gráfica", xlab="eje x", ylab="eje y")
  AnswerTests: any_of_exprs('plot(1:5, xlab="eje x", ylab="eje y")', 'plot(1:5, main="Mi gráfica", xlab="eje x", ylab="eje y")', plot(1:5, ylab="eje y", xlab="eje x"))
  Hint: Usa el mismo comando de la pregunta anterior pero agrega los argumentos xlab = "eje x" y ylab = "eje y".

- Class: text
  Output: Ahora vamos a utilizar el conjunto de datos iris para crear graficos, el cual contiene las medidas en centímetros de longitud y ancho de sépalos y pétalos 
    de tres especies de plantas de iris (setosa, versicolor y virginica) con 50 ejemplares cada una.

- Class: cmd_question
  Output: 'Para cargar el conjunto de datos iris, ingresa data("iris") en la
  línea de comandos.'
  CorrectAnswer: data("iris")
  AnswerTests: any_of_exprs('data("iris")', 'data(iris)')

- Class: cmd_question
  Output: 'Como notarás, el objeto iris fue cargado al entorno. Averigua qué clase de objeto es iris.'
  CorrectAnswer: class(iris)
  AnswerTests: omnitest(correctExpr='class(iris)')
  Hint: 'Ingresa  class(iris) en la línea de comandos.'

- Class: cmd_question
  Output: 'Como verás, iris es un data frame. Ingresa head(iris) en la línea de
  comandos para ver las primeras seis líneas de contenido de iris.'
  CorrectAnswer: head(iris)
  AnswerTests: omnitest(correctExpr='head(iris)')

- Class: text
  Output: 'Iris contiene datos de mediciones hechas a muestras de flores de la planta iris,
  Sepal.Length y Sepal.Width representan la longitud y ancho del sépalo
  respectivamente. Petal.Length y Petal.Width representan la longitud y ancho
  del pétalo. Species representa a la especie (setosa, versicolor y virginica).'

- Class: cmd_question
  Output: 'Vamos a hacer una grafica de dispersión para ver si la longitud de los pétalos está relacionada con su
  ancho, ingresa plot(iris$Petal.Length, iris$Petal.Width) en la línea de comandos.'
  CorrectAnswer: plot(iris$Petal.Length, iris$Petal.Width)
  AnswerTests: omnitest(correctExpr='plot(iris$Petal.Length, iris$Petal.Width)')

- Class: text
  Output: Muy bien, vemos que si existe una correlación, los puntos están relativamente ordenados, se ordenan más o menos en diagonal en la grafica.

- Class: text
  Output: Ahora vamos a crear un histograma. Un histograma es una representación visual de la distribución de una variable numérica, crea grupos 
    o intervalos de valores y grafica cada grupo como una barra, la altura de cada barra indica el numero de datos que hay en cada invervalo.

- Class: cmd_question
  Output: 'Usa la función hist() para graficar un histograma de las longitudes de los pétalos.'
  CorrectAnswer: hist(iris$Petal.Length)
  AnswerTests: omnitest(correctExpr='hist(iris$Petal.Length)')
  Hint:  Ingresa hist(iris$Petal.Length) y presiona Enter.

- Class: text
  Output: Como puede verse en la grafica la mayoría de los pétalos tienen una longitud entre 1 y 1.5 centímetros, pero tambíen puede verse
    que en la distribución aparecen dos grupos, puesto que hay otra parte alta en la gráfica entre 4 y 5cm, recordemos que en esta variable
    hay datos de tres especies distintas.

- Class: text
  Output: La finalidad de un histograma es que te permite ver donde se encuentra situada la mayor y menor cantidad de información.
    Y ademas te permite ver si los datos se distribuyen de forma "normal", es decir como una campana; o si hay algún factor que haga que la
    distribución no sea normal.

- Class: cmd_question
  Output: Si queremos usar intervalos mas pequeños o mas grandes, también es posible. Para eso usa el argumento breaks. Dependiendo del
   número de barras especificadas el gráfico puede ser más o menos detallado. Ingresa hist(iris$Petal.Length, breaks=5) para tener un gráfico
   con menos columnas.
  CorrectAnswer: hist(iris$Petal.Length, breaks = 5)
  AnswerTests: omnitest(correctExpr='hist(iris$Petal.Length, breaks = 5)')

- Class: cmd_question
  Output: Ahora vamos a pedir un histograma mas detallado solicitando 40 breaks.
  CorrectAnswer: hist(iris$Petal.Length, breaks = 40)
  AnswerTests: omnitest(correctExpr='hist(iris$Petal.Length, breaks = 40)')

- Class: text
  Output: Ya que exploramos los histogramas vamos a proceder con otro tipo de grafica muy útil para análisis de datos numéricos. La Gráfica de Cajas y
    Bigotes.

- Class: text
  Output: La función boxplot(), también de alto nivel, genera gráficas de cajas y bigotes. Una gráfica de caja es una forma compacta para mostrar la 
    estadística descriptiva de una variable.

- Class: cmd_question
  Output: Vamos a crear un grafico de cajas para la longitud de los pétalos. Escribe boxplot(iris$Petal.Lengt).
  CorrectAnswer: boxplot(iris$Petal.Lengt)
  AnswerTests: omnitest(correctExpr='boxplot(iris$Petal.Lengt)')

- Class: text
  Output: En este grafico podemos ver que el primer bigote o linea horizontal representa el valor mínimo del conjunto, un valor de 1 en este caso, el inicio de
    caja corresponde con el primer cuartil o el 25% de los datos, la línea gruesa representa la mediana, es decir el 50% de los datos está debajo
    de esta línea y el otro 50% por encima. El final de la caja representa el tercer cuartil y el bigote de arriba representa al máximo.

- Class: text
  Output: Una ventaja de la función boxplot() es que permite ver varias variables en una sola gráfica.

- Class: cmd_question
  Output: Así, si por ejemplo queremos graficar "Sepal.Length", "Sepal.Width",  "Petal.Length" y "Petal.Width" en un solo gráfico podemos hacerlo 
    colocando cada una de las variables como un argumento en la función boxplot() separandolos con comas. Intentalo.
  CorrectAnswer: boxplot(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)
  AnswerTests: omnitest(correctExpr='boxplot(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)')
  Hint: Recuerda que estas variables no existen como objetos en el entorno, sino que forman parte de la Data Frame "iris",
    por lo que debes hacer subsetting con el signo "$" para que R sepa donde buscarlas.
 
- Class: text
  Output: A veces aparecen unos puntos por encima o por debajo de los bigotes, como en este caso pueden verse en la segunda caja del gráfico, estos puntos
    representan valores atípicos que se difieren en mas de tres desviaciones estándar de la media y pueden tratarse de forma diferente dependiendo del diseño de 
    nuestra investigación.

- Class: text
  Output: Otra ventaja de la función boxplot() es que permite usar un argumento de tipo 'formula',  que es es una expresión con una simbolo "~",
   que indica que el primer argumento debe graficarse en grupos según el segundo argumento.

- Class: cmd_question
  Output: 'Ingresa boxplot(iris$Sepal.Width ~ iris$Species) en la
  línea de comandos.'
  CorrectAnswer: boxplot(iris$Sepal.Width ~ iris$Species)
  AnswerTests: omnitest(correctExpr='boxplot(iris$Sepal.Width ~ iris$Species)')

- Class: text
  Output: boxplot() te generó una barra por cada especie (setosa, versicolor y virginica), ya que ese fue el factor de agrupación que ingresaste
    después del simbolo "~" los valores de La gráfica te muestra que
    el ancho del sépalo de la especie setosa es mucho mayor que el de las demás
    especies.

- Class: text
  Output: 'boxplot() puede ser usado para crear gráficas de caja para variables
  individuales o para variables por grupo.'

- Class: text
  Output: 'Al igual que con hist() puedes usar los mismos argumentos que usaste
  en plot() para añadir título, subtítulo, eje x, eje y.'

- Class: text
  Output: "Para terminar, vamos a ver dos tipos de graficas mas simples, las gráficas de pastel y las graficas de barras."

- Class: text
  Output: "La función pie() para hcer graficos de pastel crea una circunferencia y la secciona de manera que 
    el area de cada sección es proporcional al valor de cada elemento de un vector o tabla de freciencias."

- Class: cmd_question
  Output: 'Hagamos una grafica de pie a partir de una tabla de frecuencias de la variable "Species" en el data frame "iris", escribe
    pie(table(iris$Species)) en la consola'
  CorrectAnswer: pie(table(iris$Species))
  AnswerTests: omnitest(correctExpr='pie(table(iris$Species))')

- Class: text
  Output: "Esta grafica representa la tabla de frecuencias, dado que todas las secciones del circulo tienen el mismo tamaño podemos
  decir que tenemos el mismo numero de individuos de cada especie en la data frame."

- Class: cmd_question
  Output: "Ahora vamos a hacer lo mismo pero con una grafica de barras, ingresa barplot(table(iris$Species))"
  CorrectAnswer: barplot(table(iris$Species))
  AnswerTests: omnitest(correctExpr='barplot(table(iris$Species))')

- Class: text
  Output: "En este caso la altura de cada barra representa el número de individuos de cada especie."

- Class: text
  Output: "Las gŕaficas de pastel no son muy recomendables ya que sus características
  son algo limitadas y es difícil perfeccionarlas para mostrar información como porcentajes o valores.
  Los autores recomiendan usar gráficas de barras, debido a que las personas son capaces de
  juzgar longitudes con mayor precisión que áreas"
  
- Class: text
  Output: "Esto es todo por hoy! Una lección bastante larga pero de 
  gran utilidad para presentar nuestros datos de forma visual."

- Class: mult_question
  Output: "¿Deseas que este ejercicio cuente como tarea?"
  CorrectAnswer: NULL
  AnswerChoices: Si;No
  AnswerTests: demand()
  Hint: ""
